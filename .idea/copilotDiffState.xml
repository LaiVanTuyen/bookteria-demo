<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/file-service/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/file-service/README.md" />
              <option name="originalContent" value="# post service&#10;sequence diagram&#10;![img.png](img.png)&#10;&#10; Quy trình xử lý API GET /media/xxxx&#10;User gửi request GET /media/xxxx đến FileController.&#10;&#10;FileController gọi phương thức get() của FileService.&#10;&#10;FileService gọi get File info từ FileManagementRepository để lấy metadata (thông tin file).&#10;&#10;FileManagementRepository truy vấn Database (find) để lấy metadata và trả về cho FileService.&#10;&#10;FileService tiếp tục gọi read file từ FileRepository.&#10;&#10;FileRepository đọc file từ File Storage và trả nội dung file về.&#10;&#10;FileService gom cả file và metadata, trả về cho FileController.&#10;&#10;FileController trả response cho User chứa file và metadata." />
              <option name="updatedContent" value="# File Service&#10;&#10;## Sequence Diagram&#10;![img.png](img.png)&#10;&#10;##  API GET /media/xxxx Handling Process&#10;&#10;### Vietnamese&#10;1. Người dùng gửi request GET /media/xxxx đến FileController.&#10;2. FileController gọi phương thức get() của FileService.&#10;3. FileService gọi lấy thông tin file từ FileManagementRepository để lấy metadata (thông tin file).&#10;4. FileManagementRepository truy vấn Database (find) để lấy metadata và trả về cho FileService.&#10;5. FileService tiếp tục gọi đọc file từ FileRepository.&#10;6. FileRepository đọc file từ File Storage và trả nội dung file về.&#10;7. FileService tổng hợp cả file và metadata, trả về cho FileController.&#10;8. FileController trả response cho người dùng, gồm file và metadata.&#10;&#10;### English&#10;1. User sends a GET /media/xxxx request to FileController.&#10;2. FileController calls the get() method of FileService.&#10;3. FileService requests file info from FileManagementRepository to get metadata.&#10;4. FileManagementRepository queries the database (find) to retrieve metadata and returns it to FileService.&#10;5. FileService then calls read file from FileRepository.&#10;6. FileRepository reads the file from File Storage and returns the file content.&#10;7. FileService combines both file and metadata, and returns them to FileController.&#10;8. FileController responds to the user with the file and metadata." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/file-service/src/main/java/com/vti/file/repository/FileRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/file-service/src/main/java/com/vti/file/repository/FileRepository.java" />
              <option name="originalContent" value="package com.vti.file.repository;&#10;&#10;import com.vti.file.dto.FileInfo;&#10;import com.vti.file.entity.FileMgmt;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.core.io.ByteArrayResource;&#10;import org.springframework.core.io.Resource;&#10;import org.springframework.stereotype.Repository;&#10;import org.springframework.util.DigestUtils;&#10;import org.springframework.util.StringUtils;&#10;import org.springframework.web.multipart.MultipartFile;&#10;&#10;import java.io.IOException;&#10;import java.nio.file.Files;&#10;import java.nio.file.Path;&#10;import java.nio.file.Paths;&#10;import java.nio.file.StandardCopyOption;&#10;import java.util.Objects;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public class FileRepository {&#10;    @Value(&quot;${app.file.storage-dir}&quot;)&#10;    String storageDir;&#10;&#10;    @Value(&quot;${app.file.download-prefix}&quot;)&#10;    String urlPrefix;&#10;&#10;    public FileInfo store(MultipartFile file) throws IOException {&#10;        Path folder = Paths.get(storageDir);&#10;&#10;        String fileExtension = StringUtils&#10;                .getFilenameExtension(file.getOriginalFilename());&#10;&#10;        String fileName = Objects.isNull(fileExtension)&#10;                ? UUID.randomUUID().toString()&#10;                : UUID.randomUUID() + &quot;.&quot; + fileExtension;&#10;&#10;        Path filePath = folder.resolve(fileName).normalize().toAbsolutePath();&#10;&#10;        Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);&#10;&#10;        return FileInfo.builder()&#10;                .name(fileName)&#10;                .size(file.getSize())&#10;                .contentType(file.getContentType())&#10;                .md5Checksum(DigestUtils.md5DigestAsHex(file.getInputStream()))&#10;                .path(filePath.toString())&#10;                .url(urlPrefix + fileName)&#10;                .build();&#10;    }&#10;&#10;    public Resource read(FileMgmt fileMgmt) throws IOException {&#10;        var data = Files.readAllBytes(Path.of(fileMgmt.getPath()));&#10;        return new ByteArrayResource(data);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.vti.file.repository;&#10;&#10;import com.vti.file.dto.FileInfo;&#10;import com.vti.file.entity.FileMgmt;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.core.io.ByteArrayResource;&#10;import org.springframework.core.io.Resource;&#10;import org.springframework.stereotype.Repository;&#10;import org.springframework.util.DigestUtils;&#10;import org.springframework.util.StringUtils;&#10;import org.springframework.web.multipart.MultipartFile;&#10;&#10;import java.io.IOException;&#10;import java.nio.file.Files;&#10;import java.nio.file.Path;&#10;import java.nio.file.Paths;&#10;import java.nio.file.StandardCopyOption;&#10;import java.util.Objects;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public class FileRepository {&#10;    @Value(&quot;${app.file.storage-dir}&quot;)&#10;    String storageDir;&#10;&#10;    @Value(&quot;${app.file.download-prefix}&quot;)&#10;    String urlPrefix;&#10;&#10;    public FileInfo store(MultipartFile file) throws IOException {&#10;        Path folder = Paths.get(storageDir);&#10;        // Tạo folder nếu chưa tồn tại&#10;        if (!Files.exists(folder)) {&#10;            Files.createDirectories(folder);&#10;        }&#10;&#10;        String fileExtension = StringUtils&#10;                .getFilenameExtension(file.getOriginalFilename());&#10;&#10;        String fileName = Objects.isNull(fileExtension)&#10;                ? UUID.randomUUID().toString()&#10;                : UUID.randomUUID() + &quot;.&quot; + fileExtension;&#10;&#10;        Path filePath = folder.resolve(fileName).normalize().toAbsolutePath();&#10;&#10;        Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);&#10;&#10;        return FileInfo.builder()&#10;                .name(fileName)&#10;                .size(file.getSize())&#10;                .contentType(file.getContentType())&#10;                .md5Checksum(DigestUtils.md5DigestAsHex(file.getInputStream()))&#10;                .path(filePath.toString())&#10;                .url(urlPrefix + fileName)&#10;                .build();&#10;    }&#10;&#10;    public Resource read(FileMgmt fileMgmt) throws IOException {&#10;        var data = Files.readAllBytes(Path.of(fileMgmt.getPath()));&#10;        return new ByteArrayResource(data);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>